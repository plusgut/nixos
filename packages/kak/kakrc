evaluate-commands %sh{
  kcr init kakoune
}

source "/home/plusgut/nixos/packages/kak/plugins/git.kak"
source "/home/plusgut/nixos/packages/kak/plugins/javascript.kak"
source "/home/plusgut/nixos/packages/kak/plugins/rust.kak"
source "/home/plusgut/nixos/packages/kak/plugins/broot.kak"
source "/home/plusgut/nixos/packages/kak/plugins/notes.kak"

require-module kitty

enable-auto-pairs

colorscheme nord
add-highlighter global/ number-lines
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces
#add-highlighter window/git-diff flag-lines Default git_diff_flags

map global user n -docstring "new window" ":connect terminal kcr attach<ret>"
map global user t -docstring "new tab" ":connect kitty-terminal-tab kcr attach<ret>"
map global user b -docstring "fuzzy buffers" ":fzf-buffers<ret>"
map global user c -docstring "new terminal" ":connect terminal<ret>"
map global user w -docstring "close buffer" ":delete-buffer!<ret>"

map global user g -docstring "git" ":enter-user-mode git<ret>" 
map global user l -docstring "languageserver" ":enter-user-mode lsp<ret>"
map global user n -docstring 'notes' ':enter-user-mode kak-notes<ret>'

set-option global kitty_window_type "os-window"

# notes
set-option global kak_notes_root_dir %sh{ echo $HOME/brain }
set-option global kak_notes_dir %sh{ echo $HOME/brain/notes }
set-option global kak_notes_archives_dir %sh{ echo $HOME/brain/archives }
set-option global kak_notes_journal_dir %sh{ echo $HOME/brain/daily }
set-option global kak_notes_capture_file %sh{ echo $HOME/brain/capture.md }

hook global InsertCompletionShow .* %{
  map window insert <tab> <c-n>
  map window insert <s-tab> <c-p>
}

hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}

eval %sh{kak-lsp --kakoune -s $kak_session}  # Not needed if you load it with plug.kak.
lsp-enable
lsp-inlay-hints-enable global

hook global WinSetOption filetype=<language> %{
  hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
  hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
  hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
  hook -once -always window WinSetOption filetype=.* %{
    remove-hooks window semantic-tokens
  }
}

lsp-inlay-diagnostics-enable global

# Use system"s clipboard
hook global NormalKey y|d|c %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | wl-copy > /dev/null 2>&1 &
}}

#define-command -override -hidden lsp-show-error -params 1 -docstring "Render error" %{
#  nop %sh{kitty @ set-tab-color active_bg=red inactive_bg=darkred}
#}

define-command -override fzf-files %{
  connect kitty-terminal-overlay sh -c %{
    fd --type f --strip-cwd-prefix | fzf | xargs kcr edit --
  }
}

define-command -override fzf-buffers %{
  connect kitty-terminal-overlay sh -c %{
    kcr get --raw --value buflist | fzf --preview "kcr cat --raw {}" | xargs kcr send buffer --
  }
}


define-command -override lf %{
  connect kitty-terminal-overlay lf %arg{@}
}

define-command kitty-terminal-overlay -params 1.. -docstring "
kitty-terminal-tab <program> [<arguments>]: create a new terminal as kitty tab
The program passed as argument will be executed in the new terminal" \
%{
    nop %sh{
        match=""
        if [ -n "$kak_client_env_KITTY_WINDOW_ID" ]; then
            match="--match=id:$kak_client_env_KITTY_WINDOW_ID"
        fi
        listen=""
        if [ -n "$kak_client_env_KITTY_LISTEN_ON" ]; then
            listen="--to=$kak_client_env_KITTY_LISTEN_ON"
        fi
        kitty @ $listen launch --no-response --type=overlay --cwd="$PWD" $match "$@"
    }
}

